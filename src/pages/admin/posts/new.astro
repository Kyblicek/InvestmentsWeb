---
import PageShell from '../../../components/PageShell.astro';

const user = Astro.locals.user;
if (!user) {
  return Astro.redirect('/prihlaseni');
}

const csrfToken = Astro.locals.csrfToken;
if (!csrfToken) {
  throw new Error('Missing CSRF token');
}

const seo = {
  title: 'Nový post | RRInvestments',
  description: 'Vytvořte nový příspěvek pro blog a naplánujte jeho publikaci.',
  noIndex: true,
  breadcrumbs: [
    { name: 'Domů', url: '/' },
    { name: 'Administrace', url: '/admin' },
    { name: 'Správa postů', url: '/admin/posts' },
    { name: 'Nový post', url: '/admin/posts/new' },
  ],
};
---
<PageShell {seo}>
  <section class="bg-[#f5f5f5] py-24">
    <div class="mx-auto w-full max-w-4xl rounded-3xl bg-white p-10 shadow-lg">
      <header class="mb-8 space-y-2">
        <p class="text-xs uppercase tracking-[0.3em] text-neutral-500">Obsah</p>
        <h1 class="font-serif text-3xl">Nový příspěvek</h1>
      </header>

      <form id="create-post-form" method="post" action="/api/posts" class="space-y-6">
        <input type="hidden" name="csrfToken" value={csrfToken} />

        <label class="block space-y-2">
          <span class="text-xs uppercase tracking-[0.3em] text-neutral-500">Nadpis *</span>
          <input
            type="text"
            name="title"
            required
            class="w-full rounded-lg border border-neutral-200 bg-white px-4 py-3 text-base text-black outline-none transition focus:border-neutral-400"
            placeholder="Krátký nadpis"
            autocomplete="off"
            autofocus
          />
        </label>

        <label class="block space-y-2">
          <span class="text-xs uppercase tracking-[0.3em] text-neutral-500">Text příspěvku *</span>
          <textarea
            name="content"
            rows="10"
            required
            class="w-full rounded-lg border border-neutral-200 bg-white px-4 py-3 text-base text-black outline-none transition focus:border-neutral-400"
            placeholder="Hlavní text (150–250 slov)"
          ></textarea>
        </label>

        <label class="block space-y-2">
          <span class="text-xs uppercase tracking-[0.3em] text-neutral-500">Naplánovat publikaci</span>
          <input
            type="datetime-local"
            name="scheduledFor"
            class="w-full rounded-lg border border-neutral-200 bg-white px-4 py-3 text-base text-black outline-none transition focus:border-neutral-400"
          />
          <p class="text-xs text-neutral-500">Když pole necháte prázdné, post zůstane jako draft do ruční publikace.</p>
        </label>

        <div class="flex flex-wrap items-center gap-4">
          <button
            type="submit"
            class="rounded-full border border-neutral-300 bg-white px-6 py-3 text-sm uppercase tracking-[0.3em] text-black transition hover:border-neutral-500"
          >
            Uložit jako draft
          </button>
          <button
            type="button"
            id="publish-post"
            class="rounded-full bg-emerald-500 px-6 py-3 text-sm uppercase tracking-[0.3em] text-black transition hover:bg-emerald-400"
          >
            Uložit &amp; publikovat
          </button>
          <a
            href="/admin/posts"
            class="rounded-full border border-neutral-300 px-6 py-3 text-sm uppercase tracking-[0.3em] text-black transition hover:border-neutral-500"
          >
            Zpět
          </a>
        </div>
      </form>
    </div>
  </section>
</PageShell>

<script>
  const publishButtonEl = document.getElementById('publish-post');
  const formEl = document.getElementById('create-post-form');
  const scheduleInput = document.querySelector('input[name="scheduledFor"]');

  if (publishButtonEl instanceof HTMLButtonElement && formEl instanceof HTMLFormElement) {
    const publishButton = publishButtonEl;
    const form = formEl;
    const scheduleField = scheduleInput instanceof HTMLInputElement ? scheduleInput : null;

    publishButton.addEventListener('click', async () => {
      const formData = new FormData(form);

      const scheduledValue = scheduleField?.value?.trim();
      const scheduleDate = scheduledValue ? new Date(scheduledValue) : null;
      const scheduleInFuture = scheduleDate && scheduleDate.getTime() > Date.now();

      publishButton.disabled = true;
      publishButton.textContent = scheduleInFuture ? 'Plánuji…' : 'Publikuji…';

      try {
        const createResponse = await fetch('/api/posts', {
          method: 'POST',
          headers: {
            Accept: 'application/json',
          },
          body: formData,
        });

        if (!createResponse.ok) {
          throw new Error('Vytvoření příspěvku selhalo.');
        }

        const { postId } = await createResponse.json();
        if (!postId) {
          throw new Error('Chybí ID nového příspěvku.');
        }

        if (scheduleInFuture) {
          window.location.href = '/admin/posts';
          return;
        }

        const publishFormData = new FormData();
        publishFormData.set('csrfToken', String(formData.get('csrfToken') ?? ''));

        const publishResponse = await fetch(`/api/posts/${postId}/publish`, {
          method: 'POST',
          headers: {
            Accept: 'application/json',
          },
          body: publishFormData,
        });

        if (!publishResponse.ok) {
          throw new Error('Publikace příspěvku selhala.');
        }

        window.location.href = `/admin/posts/${postId}`;
      } catch (error) {
        publishButton.disabled = false;
        publishButton.textContent = 'Uložit & publikovat';
        // eslint-disable-next-line no-alert
        alert(error instanceof Error ? error.message : 'Došlo k neočekávané chybě.');
      }
    });
  }
</script>
